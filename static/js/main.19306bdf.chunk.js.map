{"version":3,"sources":["atoms.tsx","Components/DragabbleCard.tsx","localStorage/localStrage.tsx","Components/Board.tsx","Components/Create.tsx","App.tsx","index.tsx","theme.ts"],"names":["toDoState","atom","key","default","Doing","Done","Card","styled","div","props","isDragging","theme","cardColor","DraggableCard","toDoId","toDoText","index","draggableId","magic","snapshot","ref","innerRef","draggableProps","dragHandleProps","React","memo","STORAGE_NAME","loadStorage","localTodos","localStorage","getItem","JSON","parse","saveStorage","todos","setItem","stringify","Wrapper","boardColor","Title","h1","Area","isDraggingOver","isDraggingFromThis","Form","form","Board","toDos","boardId","useForm","register","setValue","handleSubmit","setToDo","useSetRecoilState","onValid","toDo","newToDo","id","Date","now","text","allBoards","newBoard","onSubmit","required","type","placeholder","droppableId","Boolean","draggingFromThisWith","droppableProps","map","CreateButton","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","InputTaskName","input","Create","useRecoilState","setToDos","useState","open","setOpen","handleClose","IconButton","color","name","onClick","fontSize","Modal","onClose","Box","sx","taskName","data","Boards","App","useEffect","onDragEnd","info","destination","source","console","log","board","Object","keys","splice","forEach","boardCopy","taskObj","sourceBoard","destinationBoard","direction","GlobalStyle","createGlobalStyle","bgColor","ReactDOM","render","StrictMode","basename","process","path","document","getElementById"],"mappings":"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","file":"static/js/main.19306bdf.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport interface IToDoState {\n    [key: string]: ITodo[];\n}\n\nexport interface ITodo {\n    id: number;\n    text: string;\n}\n\nexport const toDoState = atom<IToDoState>({\n    key: \"toDo\",\n    default: {\n        \"To Do\": [],\n        Doing: [],\n        Done: [],\n    },\n});\n","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\nconst Card = styled.div<{ isDragging: boolean }>`\n    padding: 10px 10px;\n    background-color: ${(props) =>\n        props.isDragging ? \"#00a8ff\" : props.theme.cardColor};\n    box-shadow: ${(props) =>\n        props.isDragging ? \"0px 2px 5px rgba(0, 0, 0, 0.5)\" : \"none\"};\n    border-radius: 5px;\n    margin-bottom: 5px;\n`;\n\ninterface IDragabbleCardProps {\n    toDoId: number;\n    toDoText: string;\n    index: number;\n}\n\nfunction DraggableCard({ toDoId, toDoText, index }: IDragabbleCardProps) {\n    return (\n        <Draggable key={toDoId} draggableId={toDoId + \"\"} index={index}>\n            {(magic, snapshot) => (\n                <Card\n                    isDragging={snapshot.isDragging}\n                    ref={magic.innerRef}\n                    {...magic.draggableProps}\n                    {...magic.dragHandleProps}\n                >\n                    {toDoText}\n                </Card>\n            )}\n        </Draggable>\n    );\n}\nexport default React.memo(DraggableCard);\n","import { IToDoState } from \"../atoms\";\n\nexport const STORAGE_NAME = \"todo-list\";\n\nexport const loadStorage = () => {\n    const localTodos = localStorage.getItem(STORAGE_NAME);\n    if (localTodos) {\n        return JSON.parse(localTodos);\n    }\n    return null;\n};\n\nexport const saveStorage = (todos: IToDoState) => {\n    localStorage.setItem(STORAGE_NAME, JSON.stringify(todos));\n};\n\nexport const clearStorage = () => {\n    localStorage.removeItem(STORAGE_NAME);\n};\n","import { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport DraggableCard from \"./DragabbleCard\";\nimport styled from \"styled-components\";\nimport { useForm } from \"react-hook-form\";\nimport { ITodo, toDoState } from \"../atoms\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { saveStorage } from \"../localStorage/localStrage\";\n\nconst Wrapper = styled.div`\n    padding: 10px 0px;\n    background-color: ${(props) => props.theme.boardColor};\n    border-radius: 5px;\n    min-height: 300px;\n    display: flex;\n    flex-direction: column;\n    box-shadow: rgba(0, 0, 0, 0.19) 0px 10px 20px,\n        rgba(0, 0, 0, 0.23) 0px 6px 6px;\n`;\nconst Title = styled.h1`\n    text-align: center;\n    margin-bottom: 10px;\n    font-weight: 500;\n`;\n\ninterface IAreaProps {\n    isDraggingFromThis: boolean;\n    isDraggingOver: boolean;\n}\n\nconst Area = styled.div<IAreaProps>`\n    height: 100%;\n    background-color: ${(props) =>\n        props.isDraggingOver\n            ? \"#b2bec3\"\n            : props.isDraggingFromThis\n            ? \"#dcdde1\"\n            : \"transparent\"};\n    flex-grow: 1;\n    transition: background-color 0.2s ease-in-out;\n    padding: 20px;\n`;\n\ninterface IBoardProps {\n    toDos: ITodo[];\n    boardId: string;\n    index: number;\n}\n\ninterface IForm {\n    toDo: string;\n}\n\nconst Form = styled.form`\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    input {\n        height: 30px;\n        width: 100%;\n        padding: 5px;\n        margin: 5px;\n        border-radius: 15px;\n        border: none;\n    }\n`;\n\nfunction Board({ toDos, boardId, index }: IBoardProps) {\n    const { register, setValue, handleSubmit } = useForm<IForm>();\n    const setToDo = useSetRecoilState(toDoState);\n    const onValid = ({ toDo }: IForm) => {\n        const newToDo = {\n            id: Date.now(),\n            text: toDo,\n        };\n        setToDo((allBoards) => {\n            const newBoard = {\n                ...allBoards,\n                [boardId]: [...allBoards[boardId], newToDo],\n            };\n            saveStorage(newBoard);\n            return newBoard;\n        });\n        setValue(\"toDo\", \"\");\n    };\n    return (\n        <Draggable draggableId={boardId} index={index} key={boardId}>\n            {(magic) => (\n                <Wrapper\n                    ref={magic.innerRef}\n                    {...magic.draggableProps}\n                    {...magic.dragHandleProps}\n                >\n                    <Title>{boardId}</Title>\n                    <Form onSubmit={handleSubmit(onValid)}>\n                        <input\n                            {...register(\"toDo\", { required: true })}\n                            type=\"text\"\n                            placeholder={`Add task on ${boardId}`}\n                        />\n                    </Form>\n                    <Droppable droppableId={boardId}>\n                        {(magic, snapshot) => (\n                            <Area\n                                isDraggingOver={snapshot.isDraggingOver}\n                                isDraggingFromThis={Boolean(\n                                    snapshot.draggingFromThisWith\n                                )}\n                                ref={magic.innerRef}\n                                {...magic.droppableProps}\n                            >\n                                {toDos.map((toDo, index) => (\n                                    <DraggableCard\n                                        key={toDo.id}\n                                        index={index}\n                                        toDoId={toDo.id}\n                                        toDoText={toDo.text}\n                                    />\n                                ))}\n                                {magic.placeholder}\n                            </Area>\n                        )}\n                    </Droppable>\n                </Wrapper>\n            )}\n        </Draggable>\n    );\n}\n\nexport default Board;\n","import styled from \"styled-components\";\nimport { Box, IconButton } from \"@mui/material\";\nimport AddBoxIcon from \"@mui/icons-material/AddBox\";\nimport Modal from \"@mui/material/Modal\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useRecoilState } from \"recoil\";\nimport { toDoState } from \"../atoms\";\nimport { saveStorage } from \"../localStorage/localStrage\";\n\nconst CreateButton = styled.div`\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    width: 60px;\n    height: 60px;\n    object-fit: cover;\n`;\n\nconst style = {\n    position: \"absolute\" as \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 400,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4,\n};\n\nconst InputTaskName = styled.input`\n    width: 100%;\n    height: 30px;\n`;\n\nconst Form = styled.form`\n    width: 100%;\n    display: flex;\n    justify-content: center;\n`;\n\ninterface IForm {\n    taskName: string;\n}\n\nfunction Create() {\n    const { register, setValue, handleSubmit } = useForm<IForm>();\n    const [toDos, setToDos] = useRecoilState(toDoState);\n    const [open, setOpen] = React.useState(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        console.log(\"hi\");\n    };\n    const onValid = ({ taskName }: IForm) => {\n        const data = { [taskName]: [], ...toDos };\n        setToDos(data);\n        setValue(\"taskName\", \"\");\n        saveStorage(data);\n        handleClose();\n    };\n    return (\n        <CreateButton>\n            <IconButton\n                aria-label=\"done\"\n                color=\"success\"\n                name=\"create\"\n                onClick={handleOpen}\n            >\n                <AddBoxIcon fontSize=\"large\" color=\"action\" />\n            </IconButton>\n            <Modal open={open} onClose={handleClose}>\n                <Box sx={style}>\n                    <h1>Create Task</h1>\n                    <Form onSubmit={handleSubmit(onValid)}>\n                        <InputTaskName\n                            {...register(\"taskName\", {\n                                required: true,\n                            })}\n                            type=\"text\"\n                            placeholder={`Write a task name without number`}\n                        />\n                    </Form>\n                </Box>\n            </Modal>\n        </CreateButton>\n    );\n}\n\nexport default Create;\n","import { useEffect } from \"react\";\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { IToDoState, toDoState } from \"./atoms\";\nimport Board from \"./Components/Board\";\nimport Create from \"./Components/Create\";\nimport { loadStorage, saveStorage } from \"./localStorage/localStrage\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    max-width: 700px;\n    width: 100%;\n    margin: 0 auto;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n`;\n\nconst Boards = styled.div`\n    /* display: flex; */\n    /* flex-wrap: wrap; */\n    /* justify-content: flex-start; */\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 10px;\n    width: 100%;\n`;\n\nfunction App() {\n    const [toDos, setToDos] = useRecoilState(toDoState);\n    const onDrageEnd = (info: DropResult) => {\n        const { destination, source, type, draggableId } = info;\n        if (!destination) return;\n        if (type === \"task\") {\n            setToDos((allBoards) => {\n                console.log(allBoards);\n                const board = Object.keys(allBoards);\n                board.splice(source.index, 1);\n                board.splice(destination?.index, 0, draggableId);\n                const newBoard: IToDoState = {};\n                board.forEach((key) => {\n                    newBoard[key] = allBoards[key];\n                });\n                saveStorage(newBoard);\n                return newBoard;\n            });\n        } else {\n            if (destination?.droppableId === source.droppableId) {\n                // Same Board Movement;\n                setToDos((allBoards) => {\n                    const boardCopy = [...allBoards[source.droppableId]];\n                    const taskObj = boardCopy[source.index]; // 드래그하는 요소 obj\n                    boardCopy.splice(source.index, 1);\n                    boardCopy.splice(destination?.index, 0, taskObj);\n                    const newBoard = {\n                        ...allBoards,\n                        [source.droppableId]: boardCopy,\n                    };\n                    saveStorage(newBoard);\n                    return newBoard;\n                });\n            }\n            if (destination.droppableId !== source.droppableId) {\n                //Different Board Movement;\n                setToDos((allBoards) => {\n                    //전체 보드에서 source.droppableId 키를 가진 보드의 모든 요소를 가져온다.\n                    const sourceBoard = [...allBoards[source.droppableId]];\n                    const taskObj = sourceBoard[source.index];\n                    const destinationBoard = [\n                        ...allBoards[destination.droppableId],\n                    ];\n                    sourceBoard.splice(source.index, 1);\n                    destinationBoard.splice(destination?.index, 0, taskObj);\n                    const newBoard = {\n                        ...allBoards,\n                        [source.droppableId]: sourceBoard,\n                        [destination.droppableId]: destinationBoard,\n                    };\n                    saveStorage(newBoard);\n                    return newBoard;\n                });\n            }\n        }\n    };\n\n    useEffect(() => {\n        const localData = loadStorage;\n        if (localData != null) setToDos(localData);\n    }, []);\n\n    return (\n        <DragDropContext onDragEnd={onDrageEnd}>\n            <Wrapper>\n                <Droppable\n                    droppableId=\"task\"\n                    type=\"task\"\n                    direction=\"horizontal\"\n                >\n                    {(magic) => (\n                        <Boards {...magic.droppableProps} ref={magic.innerRef}>\n                            {Object.keys(toDos).map((boardId, index) => (\n                                <Board\n                                    boardId={boardId}\n                                    key={boardId}\n                                    toDos={toDos[boardId]}\n                                    index={index}\n                                />\n                            ))}\n                            {magic.placeholder}\n                        </Boards>\n                    )}\n                </Droppable>\n            </Wrapper>\n            <Create />\n        </DragDropContext>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkTheme } from \"./theme\";\nimport { createGlobalStyle } from \"styled-components\";\nimport App from \"./App\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:black;\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Routes>\n                <RecoilRoot>\n                    <Route path=\"/\">\n                        <ThemeProvider theme={darkTheme}>\n                            <GlobalStyle />\n                            <App />\n                        </ThemeProvider>\n                    </Route>\n                </RecoilRoot>\n            </Routes>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n    bgColor: \"#e58e26\",\n    boardColor: \"#fad390\",\n    cardColor: \"white\",\n};\n"],"sourceRoot":""}